This problem was asked to me in the first interview Round of a Java Developer Role.

The problem statement was:

Suppose we are given N coins, with the probabilies of them giving head when tossed.

For example, N = 3

Coins = {0.30, 0.80, 0.70}

Now, the question was to find out the probabiltiy of having more head than tails when all coins are tossed.

Constraint which I was able to take from the interviewer: N is odd. Nothing was told for the range of N. The most optimal solution was to be given
                                                          at the end.

My Approach:

  1. I started by deducing what will happen if I have one coin, obviously the answer will be just the head probablity of that coin.

  2. Then I moved to three coins, I had coin a, b, c
     There can be case when all are head, in this case answer will be just: a*b*c.
     There can be two head and one tai, in this case answer could be a*b*(1-c), a*(1-b)*c, (1-a)*b*c, So we just add them.

  3. Now the question was reduced to just selecting, coins in range [N/2+1, N] to make them head, which is just standard DP problem.

  4. I can just maintain dp[i][k] = coins[i]*dp[i-1][k-1]+(1-coins[i])*dp[i-1][k]
     
     Here, i is the index of coin selected, 
     k is the number of head left to be assigned, 
     coins[i] is the head value of that coin.

Other approach which may work but I am unable to fully solve:

    I think all the cases can be just represented in a singular mathematical expression, which can be
    generated by simplifying the casework:

    Like, ans = a*b*c + a*b*(1-c)+a*(1-b)*c+(1-a)*b*c
              = a*b*c -a*b*c -a*b*c -a*b*c a*b+a*c+c*b
              = a*b + a*c + b*c - 2*a*b*c
    
    Something like this...